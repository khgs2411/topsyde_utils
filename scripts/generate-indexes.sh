#!/bin/bash

# Create scripts directory if it doesn't exist
mkdir -p scripts

# Define the output file
INDEX_FILE="src/index.ts"

# Clear the existing index file
echo "// This file is auto-generated by scripts/generate-indexes.sh" > $INDEX_FILE
echo "// Do not edit this file directly" >> $INDEX_FILE
echo "" >> $INDEX_FILE

# Find all TypeScript files in the src directory and subdirectories, excluding the index.ts file itself and test files
FILES=$(find src -type f -name "*.ts" | grep -v "index.ts" | grep -v ".test.ts" | sort)

# First, export all modules that don't have default exports
echo "// Export all modules" >> $INDEX_FILE
for file in $FILES; do
  # Extract the relative path from src
  rel_path=${file#src/}
  # Extract the directory path if any
  dir_path=$(dirname "$rel_path")
  # Extract the filename without extension
  filename=$(basename "$rel_path" .ts)
  
  # Skip the index file itself
  if [ "$filename" != "index" ]; then
    # Check if the file has any named exports (not just a default export)
    if grep -q "export " "$file" | grep -v "export default"; then
      # If the file is directly in src, use simple path
      if [ "$dir_path" = "." ]; then
        echo "export * from './$filename';" >> $INDEX_FILE
      else
        # For nested files, create the import path
        echo "export * from './$dir_path/$filename';" >> $INDEX_FILE
      fi
    fi
  fi
done

echo "" >> $INDEX_FILE

# Then, export default classes
echo "// Export default classes" >> $INDEX_FILE
for file in $FILES; do
  # Extract the relative path from src
  rel_path=${file#src/}
  # Extract the directory path if any
  dir_path=$(dirname "$rel_path")
  # Extract the filename without extension
  filename=$(basename "$rel_path" .ts)
  
  # Skip the index file itself
  if [ "$filename" != "index" ]; then
    # Check if the file has a default export
    if grep -q "export default" "$file"; then
      # Use the filename with first letter capitalized
      capitalized=$(echo "$filename" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')
      
      # If the file is directly in src, use simple path
      if [ "$dir_path" = "." ]; then
        echo "export { default as $capitalized } from './$filename';" >> $INDEX_FILE
      else
        # For nested files, create the import path with directory prefix to avoid naming conflicts
        # For example, router/router.ts becomes RouterRouter instead of Router
        dir_capitalized=$(echo "$dir_path" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')
        echo "export { default as $dir_capitalized$capitalized } from './$dir_path/$filename';" >> $INDEX_FILE
      fi
    fi
  fi
done

echo "" >> $INDEX_FILE

# Add specific re-exports for backward compatibility
echo "// Re-export specific items for backward compatibility" >> $INDEX_FILE
echo "export { ERROR_CODE, HTTP_ERROR_CODE, WS_ERROR_CODE } from './errors';" >> $INDEX_FILE
echo "export { E_IS, E_ENVIRONMENTS } from './enums';" >> $INDEX_FILE
echo "export { RESPONSE_INIT, RESPONSE_METHOD_OPTIONS } from './app';" >> $INDEX_FILE

# Now, create barrel exports for each subdirectory
echo "" >> $INDEX_FILE
echo "// Barrel exports for subdirectories" >> $INDEX_FILE

# Find all subdirectories in src
SUBDIRS=$(find src -type d -not -path "src" -not -path "src/__tests__*" | sort)

for subdir in $SUBDIRS; do
  # Get the directory name relative to src
  rel_dir=${subdir#src/}
  # Capitalize the first letter of the directory name for the namespace
  namespace=$(echo "$rel_dir" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')
  
  # Check if there are any TypeScript files in this directory
  if [ -n "$(find "$subdir" -maxdepth 1 -name "*.ts" | grep -v ".test.ts")" ]; then
    echo "// Create module for $rel_dir" >> $INDEX_FILE
    echo "import * as ${namespace}Module from './$rel_dir';" >> $INDEX_FILE
    echo "export { ${namespace}Module as $namespace };" >> $INDEX_FILE
    echo "" >> $INDEX_FILE
    
    # Create a barrel file for this subdirectory
    SUBDIR_INDEX="${subdir}/index.ts"
    echo "// This file is auto-generated by scripts/generate-indexes.sh" > $SUBDIR_INDEX
    echo "// Do not edit this file directly" >> $SUBDIR_INDEX
    echo "" >> $SUBDIR_INDEX
    
    # Export all modules from this directory
    for file in $(find "$subdir" -maxdepth 1 -name "*.ts" | grep -v "index.ts" | grep -v ".test.ts" | sort); do
      filename=$(basename "$file" .ts)
      
      # Export all named exports
      echo "export * from './$filename';" >> $SUBDIR_INDEX
      
      # Check if the file has a default export and export it with a specific name
      if grep -q "export default" "$file"; then
        capitalized=$(echo "$filename" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')
        echo "export { default as $capitalized } from './$filename';" >> $SUBDIR_INDEX
      fi
    done
  fi
done

echo "Index file generated successfully at $INDEX_FILE" 